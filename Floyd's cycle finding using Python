#Floyd's Cycle Detection Algotrithem
class Node:
    def __init__(self, d):
        self.data = d
        self.next = None
Head = None
def DetectLoop(Head):
    SlowPointer = Head
    FastPointer = Head
    while (SlowPointer != None and FastPointer != None and FastPointer.next != None):
        SlowPointer = SlowPointer.next
        FastPointer = FastPointer.next.next
        if (SlowPointer == FastPointer):
            return 1
    return 0
Head = Node(31)
Head.next = Node(32)
Head.next.next = Node(33)
Head.next.next.next = Node(34)
Head.next.next.next.next = Node(35)
Head.next.next.next.next.next = Node(36)
Head.next.next.next.next.next.next = Node(37)
Head.next.next.next.next.next.next.next = Node(38)
tmp = Head
while (tmp.next != None):
    tmp = tmp.next
tmp.next = Head
print("Here is a Floyd's Cycle Detection Algorithem:")
print("Is Loop Exist or not:")
if (DetectLoop(Head)):
    print("Loop exists in the Linked List")
else:
    print("Loop does not exists in the Linked List")
#    Output-
#    Here is a Floyd's Cycle Detection Algorithem:
#Is Loop Exist or not:
#Loop exists in the Linked List
